[build-system]
requires = ["poetry-core>=1,<2", "poetry-dynamic-versioning>=1.4,<2"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry]
name = "pychip8"
version = "0.0.0"
description = "Chip-8 emulator written in Python"
authors = ["Eduardo Klosowski <eduardo_klosowski@yahoo.com>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/eduardoklosowski/pychip8"
classifiers = [
  "Development Status :: 1 - Planning",
  "Environment :: Console :: Curses",
  "Environment :: X11 Applications",
  "Intended Audience :: End Users/Desktop",
  "Operating System :: OS Independent",
  "Topic :: Games/Entertainment",
  "Topic :: Software Development :: Interpreters",
  "Topic :: System :: Emulators",
  "Typing :: Typed",
  "Private :: Do Not Upload",
]

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"

[tool.poetry.dependencies]
python = "^3.10"
pysdl2 = "^0.9"

[tool.poetry.group.lint.dependencies]
flake8 = "^6.0"
flake8-isort = "^6.0"
pep8-naming = "^0.13"
flake8-quotes = "^3.3"
flake8-commas = "^2.1"
flake8-simplify = "^0.19"
flake8-comprehensions = "^3.10"
flake8-return = "^1.2"
flake8-print = "^5.0"
flake8-debugger = "^4.1"
flake8-pytest-style = "^1.6"
flake8-bugbear = "^23.1"
mypy = "^0.991"
bandit = "^1.7"

[tool.poetry.group.test.dependencies]
pytest = "^7.2"
pytest-cov = "^4.0"
pytest-xdist = "^3.1"

[tool.poetry.scripts]
pychip8 = "pychip8.cli:main"

[tool.isort]
float_to_top = true
multi_line_output = "VERTICAL_GRID"
line_length = 119
src_paths = [
  "pychip8",
  "tests",
]

[tool.mypy]
warn_unused_configs = true
show_column_numbers = true
show_error_codes = true
sqlite_cache = true
strict = true

[[tool.mypy.overrides]]
module = [
  "sdl2.*",
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = [
  "tests",
]

[tool.pytest.ini_options]
addopts = "--strict-config --cov-report=term-missing --no-cov-on-fail --cov=pychip8"
testpaths = [
  "tests",
]

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "if (typing\\.)?TYPE_CHECKING:",
  "@overload",
  "class .*\\((typing\\.)?Protocol\\):",
  "if __name__ == '__main__':",
]
